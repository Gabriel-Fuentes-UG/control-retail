// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// =======================================
// Modelos de Estructura, Usuarios y Permisos
// =======================================
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId             String
  role               Role               @relation(fields: [roleId], references: [id])
  storeId            String?
  store              Store?             @relation("StoreUsers", fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedStores   SupervisorStores[] @relation("SupervisorRelation")
  auditLogs          AuditLog[]
  confirmedMovements Movement[]         @relation("ConfirmedByUserRelation")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  homeRoute   String
  users       User[]
  permissions Permission[] @relation("RolePermissions")
}

model Permission {
  id          String  @id @default(cuid())
  action      String  @unique
  description String?
  roles       Role[]  @relation("RolePermissions")
}

model Store {
  id               String             @id
  name             String
  isActive         Boolean            @default(true)
  users            User[]             @relation("StoreUsers")
  supervisedBy     SupervisorStores[] @relation("StoreRelation")
  inventory        Inventory[]
  movementsOrigin  Movement[]         @relation("OriginStoreMovements")
  movementsDestiny Movement[]         @relation("DestinyStoreMovements")
}

model SupervisorStores {
  userId  String
  storeId String
  user    User   @relation("SupervisorRelation", fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  store   Store  @relation("StoreRelation", fields: [storeId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@id([userId, storeId])
}

model SystemConfig {
  key   String @id
  value String
}

// =======================================
// Modelos de Producto e Inventario
// =======================================
model Product {
  id              String          @id @default(cuid())
  sku             String          @unique
  name            String
  description     String?
  cost            Float           @default(0)
  price           Float           @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  inventory       Inventory[]
  movementItems   MovementItem[]
  inventoryLosses InventoryLoss[]
}

model Inventory {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  stock     Int      @default(0)
  inTransit Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([storeId, productId])
}
model Transfer {
  folioSAP            String   @id                                   // varchar
  numAtCard           String
  docNum              String
  fecha               DateTime
  memo                String?
  originStoreId       String
  destinationStoreId  String
  status              String                                   // 'PENDIENTE' | 'TOTAL' | 'PARCIAL' | 'CANCELADO'
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}


// =======================================
// Modelos de Movimientos (Entradas/Salidas)
// =======================================
model MovementType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  movements   Movement[]
}

model MovementStatus {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  movements   Movement[]
}

model Movement {
  id                String   @id @default(cuid())
  documentNumber    String?  @unique // ← IMPORTANTE
  transactionNumber String?
  observations      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Tipo de movimiento
  typeId String
  type   MovementType @relation(fields: [typeId], references: [id])

  // Estado propio del traslado
  statusId String
  status   MovementStatus @relation(fields: [statusId], references: [id])

  // Origen y destino
  originStoreId      String?
  originStore        Store?  @relation("OriginStoreMovements", fields: [originStoreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  destinationStoreId String?
  destinationStore   Store?  @relation("DestinyStoreMovements", fields: [destinationStoreId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Usuario que confirma
  confirmedByUserId String?
  confirmedByUser   User?   @relation("ConfirmedByUserRelation", fields: [confirmedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Detalle y trazabilidad
  items MovementItem[]
  boxes Box[]

  // Sub-movimientos
  parentMovementId String?
  parentMovement   Movement?  @relation("SubMovements", fields: [parentMovementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subMovements     Movement[] @relation("SubMovements")

  incidents       TransferIncident[]
  inventoryLosses InventoryLoss[]

  // Logs de recepción vinculados por folioSAP
  receptionLogs ReceptionLog[] @relation("TransferLogs")
}

model MovementItem {
  id               String   @id @default(cuid())
  movementId       String
  movement         Movement @relation(fields: [movementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId        String
  product          Product  @relation(fields: [productId], references: [id], onDelete: NoAction)
  quantityExpected Int
  quantityReceived Int?
  boxId            String?
  box              Box?     @relation(fields: [boxId], references: [id], onDelete: NoAction)
}

model Box {
  id         String         @id @default(cuid())
  movementId String
  movement   Movement       @relation(fields: [movementId], references: [id], onDelete: Cascade)
  boxNumber  Int
  isClosed   Boolean        @default(false)
  items      MovementItem[]
}

// =======================================
// Nuevos Modelos para Trazabilidad e Incidencias
// =======================================
model TransferIncident {
  id         String   @id @default(cuid())
  movementId String
  movement   Movement @relation(fields: [movementId], references: [id])

  detectedByUserId String
  detectedStoreId  String
  detectedAt       DateTime @default(now())

  incidentType String // 'DEVIATION' o 'THEFT'
  notes        String?

  resolvedByUserId String?
  resolvedAt       DateTime?
  resolutionNotes  String?
}

model InventoryLoss {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  reason           String // 'THEFT', 'DAMAGED', 'ADJUSTMENT'
  recordedByUserId String
  occurredAt       DateTime @default(now())

  storeId    String?
  movementId String?
  movement   Movement? @relation(fields: [movementId], references: [id])
}

// =======================================
// Modelo de Auditoría
// =======================================
model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String?
}

// =======================================
// Registro de líneas recepcionadas
// =======================================
model ReceptionLog {
  id               String   @id @default(cuid())
  folioSAP         String
  linenum          Int
  articulo         String
  cantidadEsperada Int
  cantidadRecibida Int
  diferencia       Int
  motivo           String?
  observaciones    String?
  createdAt        DateTime @default(now())

  movement Movement? @relation("TransferLogs", fields: [folioSAP], references: [documentNumber])

  @@unique([folioSAP, linenum], name: "unique_folio_linenum")
}
